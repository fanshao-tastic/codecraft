			        2017华为软件精英挑战赛的总结

	首先简简单单的介绍一下为什么要参加这个比赛。一个月前，实验室学弟(段学霸)突然对我说
    邀请我参加这个比赛，一开始，我是拒绝的。因为当时一心一意的忙着小论文，实在没有心思整这些比赛，
    再者，学霸还说让我担任队长，这就让我很惶恐了，因为我对这类比赛实在没有经验可谈。不过，学霸后
    来再次邀请我，我最后还是决定和他们一起参加，并见到了怂恿参加比赛的小白龙（刘天恒）。好歹，团队
    中的三人总算是聚集起来了。接下来，就该好好说说我们做这个比赛的过程了。
	最开始，拿到赛题的时候，大家心里估计都在默念“卧槽，这是什么jb题目，完全看不懂，这怎么做啊！
    妈的，谁说要参加比赛的，#%￥……&%#%……&...”。作为队长的我，肯定不能怂啊。然后我很镇定的吩咐了第
    一个任务，这两天先把题目读懂，有什么想法先记下来，到时候一起讨论。就这样懵b的开始了这次比赛。
        接下来的才是正文。。。
	1 算法描述
	服务器定位+网络流算法。其中服务器定位我们选择的是遗传算法，网络流算法选择的是最大流最小费
    用算法，底层用的是Dijkstra(前期)、SPFA(后期)，这些算法的具体实现都在Deploy.java这个文件中。
	1.1 遗传算法
	遗传算法主要包括变异、交叉、选择这三个步骤，这个算法的实现在Individual.java和Population.ja
    va这两个文件中。通过测试，我们删除了交叉这一个过程，为了提高速度，我们将种群的数量降的很低，并且
    每次只变异一个个体。(就是因为java的速度原因，在大用例的时候我们不得不这样做)
	1.2 Dijkstra
	Dijkstra算法是最短路径算法，《数据结构与算法分析》上面讲解的很详细，这里就不多做解释了，我们
    之所以放弃该算法，是因为它无法处理负值的情况，但是网络流是双向的，这就限制了该算法的使用。
        1.3 SPFA
	SPFA也是最短路径算法，用于解决负值的情况，但是我们却没有解决两条路径权重一种，到底选择哪一条，
    这个问题一直没弄明白。
        1.4 最大流最小费用
	这个是本次比赛中很重要的部分。这次虚拟了一个总服务器、总消费节点，不断运行SPFA算法，然后更新图。
	2.总结
	a.队友很重要，队长需要分好工，不同的队友负责不同的事情，在队内情绪不佳时，队长需要调动大家的积极性。
	b.我们只是完成了这些算法，然而并没有对这些算法进行优化，也没有多种服务器选择的比较。导致最后成绩不太好。
	c.理论与实践是有差距的，有时候需要不断尝试，但是选择一个适合的算法才是最重要的，否则花太多的功夫也是徒劳。
       先写这么多，以后向导什么，在加上去。。。。（待续）
